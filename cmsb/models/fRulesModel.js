const mongoose = require("mongoose");

const fruleSchema = new mongoose.Schema({
  ruleId: {
    type: String,
    required: [true, "RuleId Required"],
    unique: true,
  },
  deviceId: {
    type: String,
    required: [true, "Device Id Required"],
  },
  rtype: {
    type: String,
    required: [true, "Rule Type Required"],
  },
  action: {
    type: String,
  },
  disabled: {
    type: Boolean,
  },
  quick: {
    type: Boolean,
  },
  interface: [
    {
      type: String,
    },
  ],
  direction: {
    type: String,
  },
  addressFamily: {
    type: String,
  },
  protocol: {
    type: String,
  },
  icmpSubtypes: [
    {
      type: String,
    },
  ],
  sInvertMatch: {
    type: Boolean,
  },
  sAny: {
    type: String,
  },
  sAddress: {
    type: String,
  },
  sPort: {
    type: String,
  },
  sprFrom: {
    type: String,
  },
  sprFromCustom: {
    type: String,
  },
  sprTo: {
    type: String,
  },
  sprToCustom: {
    type: String,
  },
  dInvertMatch: {
    type: Boolean,
  },
  dAny: {
    type: String,
  },
  dAddress: {
    type: String,
  },
  dPort: {
    type: String,
  },
  dptFrom: {
    type: String,
  },
  dptFromCustom: {
    type: String,
  },
  dptTo: {
    type: String,
  },
  dptToCustom: {
    type: String,
  },
  log: {
    type: Boolean,
  },
  description: {
    type: String,
  },
  sourceOs: {
    type: String,
  },
  diffservCodePoint: {
    type: String,
  },
  allowIpOptions: {
    type: Boolean,
  },
  disableReplyTo: {
    type: Boolean,
  },
  tag: {
    type: String,
  },
  tInvert: {
    type: Boolean,
  },
  tagged: {
    type: String,
  },
  maxState: {
    type: String,
  },
  maxSrcNodes: {
    type: String,
  },
  maxConnections: {
    type: String,
  },
  maxSrcStates: {
    type: String,
  },
  maxSrcConnRate: {
    type: String,
  },
  maxSrcConnRateS: {
    type: String,
  },
  stateTimeout: {
    type: String,
  },
  setFin: {
    type: Boolean,
  },
  setSyn: {
    type: Boolean,
  },
  setRst: {
    type: Boolean,
  },
  setPsh: {
    type: Boolean,
  },
  setAck: {
    type: Boolean,
  },
  setUrg: {
    type: Boolean,
  },
  setEce: {
    type: Boolean,
  },
  setCwr: {
    type: Boolean,
  },
  outofFin: {
    type: Boolean,
  },
  outofSyn: {
    type: Boolean,
  },
  outofRst: {
    type: Boolean,
  },
  outofPsh: {
    type: Boolean,
  },
  outofAck: {
    type: Boolean,
  },
  outofUrg: {
    type: Boolean,
  },
  outofEce: {
    type: Boolean,
  },
  outofCwr: {
    type: Boolean,
  },
  tcpAnyFlag: {
    type: Boolean,
  },
  noPfsync: {
    type: Boolean,
  },
  stateType: {
    type: String,
  },
  noXmlrpcSync: {
    type: Boolean,
  },
  vlanPrio: {
    type: String,
  },
  vlanPrioSet: {
    type: String,
  },
  gateway: {
    type: String,
  },
  pfsenseId: {
    type: Number,
  },
  pfsenseDeleteId: {
    type: Number,
  },
  generatedByUserId: {
    type: String,
    required: [true, "Generated by UserId Required"],
  },
});

module.exports = mongoose.model("Frule", fruleSchema);
